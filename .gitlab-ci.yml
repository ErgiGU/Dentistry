image: node:18-alpine

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

cache: 
  key: $CI_COMMIT_REF_SLUG
  paths:
    - client/node_modules
    - server/helpers/node_modules
    - server/clinic_data/node_modules
    - server/appointments/node_modules
    - server/authorization/node_modules

stages:          # List of stages for jobs, and their order of execution
  - client.build
  - authorization
  - clinic_data
  - appointments


variables:
  CLOUD_MQTT_HOST: $CLOUD_MQTT_HOST
  CLOUD_MQTT_ADMIN_PASSWORD: $CLOUD_MQTT_ADMIN_PASSWORD
  CLOUD_MQTT_ADMIN2_PASSWORD: $CLOUD_MQTT_ADMIN2_PASSWORD
  MAPBOX_ACCESS_TOKEN: $MAPBOX_ACCESS_TOKEN
  TESTING_DB_PASSWORD: $TESTING_DB_PASSWORD

helper-run-job: 
  stage: .pre
  tags:
    - docker
  script:
    - cd server/helpers
    - npm install

client-build-job:       # This job runs in the build stage, which runs first.
  stage: client.build
  tags:
    - docker
  script:
    - cd client
    - npm install
    - npm run build

appointments-build-job:       # This job runs in the build stage, which runs first.
  stage: appointments
  tags:
    - docker
  script:
    - cd server/appointments
    - npm install

appointments-unit-test-job:   # This job runs in the test stage.
  stage: appointments         # It only starts when the job in the build stage completes successfully.
  needs: ["appointments-build-job"]
  when: delayed
  start_in: 100 seconds
  tags:
    - docker
  script:
    - cd server/helpers
    - npm install
    - cd ../appointments
    - npm install
    - npx mocha appointments_app_test.js

appointments-unit-run-job:   # This job runs in the test stage.
  stage: appointments         # It only starts when the job in the build stage completes successfully.
  needs: ["appointments-build-job"]
  tags:
    - docker
  script:
    - cd server/appointments
    - node appointments_app.js

clinic_data-build-job:       # This job runs in the build stage, which runs first.
  stage: clinic_data
  tags:
    - docker
  script:
    - cd server/clinic_data
    - npm install

clinic_data-unit-test-job:   # This job runs in the test stage.
  stage: clinic_data         # It only starts when the job in the build stage completes successfully.
  needs: ["clinic_data-build-job"]
  when: delayed
  start_in: 100 seconds
  tags:
    - docker
  script:
    - cd server/helpers
    - npm install
    - cd ../clinic_data
    - npm install
    - npx mocha clinic_data_app_test.js

clinic_data-unit-run-job:   # This job runs in the test stage.
  stage: clinic_data         # It only starts when the job in the build stage completes successfully.
  needs: ["clinic_data-build-job"]
  tags:
    - docker
  script:
    - cd server/clinic_data
    - node clinic_data_app.js

authorization-build-job:       # This job runs in the build stage, which runs first.
  stage: authorization
  tags:
    - docker
  script:
    - cd server/authorization
    - npm install

authorization-unit-test-job:   # This job runs in the test stage.
  stage: authorization         # It only starts when the job in the build stage completes successfully.
  needs: ["authorization-build-job"]
  when: delayed
  start_in: 100 seconds
  tags:
    - docker
  script:
    - cd server/helpers
    - npm install
    - cd ../authorization
    - npm install
    - npx mocha authorization_app_test.js

authorization-unit-run-job:   # This job runs in the test stage.
  stage: authorization         # It only starts when the job in the build stage completes successfully.
  needs: ["authorization-build-job"]
  tags:
    - docker
  script:
    - cd server/authorization
    - node authorization_app.js